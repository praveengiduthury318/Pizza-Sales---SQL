Q1. Retrieve the total number of orders placed
A1. SELECT 
    COUNT(order_id) AS total_orders
FROM
    pizzahut.orders;

Q2. Calculate the total revenue generated from pizza sales
A2. SELECT 
    ROUND(SUM(orders_details.quantity * pizzas.price),
            2) AS total_sales
FROM
    orders_details
        JOIN
    pizzas ON pizzas.pizza_id = orders_details.pizza_id;

Q3. Identify the highest-priced pizza
A3. SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY price DESC
LIMIT 1;

Q4. Identify the most common pizza size ordered
A4. SELECT 
    pizzas.size,
    COUNT(orders_details.order_details_id) AS order_count
FROM
    pizzas
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizzas.size
ORDER BY order_count DESC;

Q5. List the top 5 most ordered pizza types along with their quantities
A5. SELECT 
    pizza_types.name,
    COUNT(orders_details.order_details_id) AS order_count,
    SUM(orders_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.name
ORDER BY order_count DESC
LIMIT 5;

Q6. Join the necessary tables to find the total quantity of each pizza category ordered
A6. SELECT 
    pizza_types.category,
    SUM(orders_details.quantity) AS total_quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.category
ORDER BY total_quantity DESC;

Q7. Determine the distribution of orders by hour of the day
A7. SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY hour;

Q8. Join relevant tables to find the category-wise distribution of pizzas
A8. SELECT 
    category, COUNT(ingredients) AS count
FROM
    pizza_types
GROUP BY category;

Q9. Group the orders by date and calculate the average number of pizzas ordered per day
A9. SELECT 
    ROUND(AVG(quantity),0) AS average
FROM
    (SELECT 
        orders.order_date, SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY orders.order_date) AS order_quantity;

Q10. Determine the top 3 most ordered pizza types based on revenue
A10. 	SELECT 
		pizza_types.name,
		ROUND(SUM(orders_details.quantity * pizzas.price),0) AS revenue
	FROM
		pizza_types
			JOIN
		pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
			JOIN
		orders_details ON pizzas.pizza_id = orders_details.pizza_id
	GROUP BY pizza_types.name
	ORDER BY revenue DESC
	LIMIT 3;

Q11. Calculate the percentage contribution of each pizza type to total revenue
A11. SELECT 
    pizza_types.category,
    ROUND(SUM(orders_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(orders_details.quantity * pizzas.price),
                                2) AS total_sales
                FROM
                    orders_details
                        JOIN
                    pizzas ON orders_details.pizza_id = pizzas.pizza_id) * 100,
            2) AS revenue	
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizza_types.category;

Q12. Analyze the cumulative revenue generated over time
A12. SELECT order_date,
SUM(revenue) OVER (order by order_date) as cum_revenue
FROM (
SELECT 
    orders.order_date,
    SUM(orders_details.quantity * pizzas.price) AS revenue
FROM
    orders_details
        JOIN
    pizzas ON orders_details.pizza_id = pizzas.pizza_id
        JOIN
    orders ON orders.order_id = orders_details.order_id
GROUP BY orders.order_date) as sales;

Q13. Determine the top 3 most ordered pizza types based on revenue for each pizza category
A13. select *
FROM 
(SELECT category,name,revenue,
RANK() OVER (partition by category order by revenue desc) as rn
FROM
(SELECT pizza_types.category,
pizza_types.name,
SUM(orders_details.quantity * pizzas.price) as revenue
FROM orders_details JOIN pizzas
ON orders_details.pizza_id = pizzas.pizza_id
JOIN pizza_types ON
pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.category,pizza_types.name) as revenue_table) as table_b
WHERE rn<=3;
